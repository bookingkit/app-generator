name: Build and Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo, phar, reflection, session, simplexml, tokenizer, xml, xmlreader, xmlwriter
        tools: composer:v2

    - name: Install dependencies
      run: composer install --no-dev --optimize-autoloader

    - name: Build application
      run: |
        echo "üî® Building application..."
        php app-generator app:build app-generator --build-version=${{ github.sha }}
        
        echo "üìÅ Checking build output..."
        ls -la builds/
        
        echo "üîç Checking if PHAR file exists and is valid..."
        if [ -f "builds/app-generator" ]; then
          echo "‚úÖ PHAR file exists"
          file builds/app-generator
          head -5 builds/app-generator
        else
          echo "‚ùå PHAR file not found!"
          exit 1
        fi

    - name: Get version
      id: version
      run: |
        if [ -f "version.txt" ]; then
          CURRENT_VERSION=$(cat version.txt)
        else
          CURRENT_VERSION="0.0.1"
        fi
        
        # Parse version components
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        # Increment patch version, handle overflow
        NEW_PATCH=$((PATCH + 1))
        if [ $NEW_PATCH -gt 20 ]; then
          NEW_PATCH=1
          NEW_MINOR=$((MINOR + 1))
          if [ $NEW_MINOR -gt 20 ]; then
            NEW_MINOR=1
            NEW_MAJOR=$((MAJOR + 1))
          else
            NEW_MAJOR=$MAJOR
          fi
        else
          NEW_MINOR=$MINOR
          NEW_MAJOR=$MAJOR
        fi
        NEW_VERSION="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
        echo "New version: $NEW_VERSION"

    - name: Update version file
      run: echo "${{ steps.version.outputs.version }}" > version.txt

    - name: Update version file
      run: echo "${{ steps.version.outputs.version }}" > latest-version.txt

    - name: Verify PHAR file
      run: |
        echo "üîç Verifying PHAR file before release..."
        if [ ! -f "builds/app-generator" ]; then
          echo "‚ùå PHAR file not found!"
          exit 1
        fi
        
        # Check if file starts with PHP shebang or PHAR magic
        FIRST_LINE=$(head -1 builds/app-generator)
        if [[ "$FIRST_LINE" == *"<?php"* ]] || [[ "$FIRST_LINE" == *"#!/usr/bin/env php"* ]]; then
          echo "‚úÖ PHAR file appears to be valid"
        else
          echo "‚ùå PHAR file appears to be corrupted or contains error output"
          echo "First line: $FIRST_LINE"
          exit 1
        fi
        
        # Make sure it's executable
        chmod +x builds/app-generator
        
        # Test the PHAR file
        echo "üß™ Testing PHAR file..."
        ./builds/app-generator --version || ./builds/app-generator --help || echo "PHAR file test completed"

    - name: Create Release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Create release using GitHub CLI
        gh release create v${{ steps.version.outputs.version }} \
          --title "Release v${{ steps.version.outputs.version }}" \
          --notes "## üöÄ Release v${{ steps.version.outputs.version }}
        
        ### üì¶ Download
        
        #### Latest Version
        \`\`\`bash
        # Get latest version
        LATEST_VERSION=\$(curl -s https://raw.githubusercontent.com/${{ github.repository }}/main/latest-version.txt)
        
        # Download binary
        curl -L \"https://github.com/${{ github.repository }}/releases/download/v\$LATEST_VERSION/app-generator\" -o app-generator
        chmod +x app-generator
        ./app-generator
        \`\`\`
        
        #### Direct Download
        Download the binary directly: [app-generator](https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/app-generator)" \
          ./builds/app-generator \
          --repo ${{ github.repository }}

    - name: Create Latest Release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Check if latest release exists and delete it if it does
        echo "üîç Checking for existing latest release..."
        LATEST_RELEASE_RESPONSE=$(curl -s \
          -H "Authorization: token ${{ github.token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/releases/latest")
        
        # Check if the response contains an error (release doesn't exist)
        if echo "$LATEST_RELEASE_RESPONSE" | jq -e '.message' > /dev/null 2>&1; then
          echo "‚ÑπÔ∏è  No existing latest release found (this is normal for first run)"
        else
          LATEST_RELEASE_ID=$(echo "$LATEST_RELEASE_RESPONSE" | jq -r '.id // empty')
                      if [ ! -z "$LATEST_RELEASE_ID" ] && [ "$LATEST_RELEASE_ID" != "null" ]; then
              echo "üóëÔ∏è  Deleting existing latest release (ID: $LATEST_RELEASE_ID)..."
              DELETE_RESPONSE=$(curl -s \
                -X DELETE \
                -H "Authorization: token ${{ github.token }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/releases/$LATEST_RELEASE_ID")
              
              if [ $? -eq 0 ]; then
                echo "‚úÖ Latest release deleted successfully"
              else
                echo "‚ö†Ô∏è  Warning: Could not delete latest release, but continuing..."
              fi
              
              # Also delete the "latest" tag using multiple methods
              echo "üè∑Ô∏è  Deleting latest tag..."
              
              # Method 1: Try GitHub API
              TAG_DELETE_RESPONSE=$(curl -s \
                -X DELETE \
                -H "Authorization: token ${{ github.token }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/latest")
              
              # Method 2: Try GitHub CLI if API fails
              if [ $? -ne 0 ]; then
                echo "üîÑ Trying GitHub CLI to delete tag..."
                gh api repos/${{ github.repository }}/git/refs/tags/latest -X DELETE || true
              fi
              
              # Method 3: Force delete using git commands
              echo "üîÑ Trying git commands to delete tag..."
              git tag -d latest || true
              git push origin :refs/tags/latest || true
              
              echo "‚úÖ Tag deletion attempts completed"
            else
              echo "‚ÑπÔ∏è  No valid latest release ID found"
            fi
        fi
        
        # Verify tag is deleted before creating new release
        echo "üîç Verifying latest tag is deleted..."
        sleep 2  # Give GitHub API time to process deletion
        
        TAG_CHECK_RESPONSE=$(curl -s \
          -H "Authorization: token ${{ github.token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/latest")
        
        if echo "$TAG_CHECK_RESPONSE" | jq -e '.message' > /dev/null 2>&1; then
          echo "‚úÖ Latest tag is confirmed deleted"
        else
          echo "‚ö†Ô∏è  Latest tag may still exist, but continuing..."
        fi
        
        # Create new latest release
        echo "üöÄ Creating new latest release..."
        LATEST_CREATE_RESPONSE=$(curl -s \
          -X POST \
          -H "Authorization: token ${{ github.token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Content-Type: application/json" \
          -d "{
            \"tag_name\": \"latest\",
            \"name\": \"Latest Release v${{ steps.version.outputs.version }}\",
            \"body\": \"Latest version of app-generator CLI tool.\",
            \"draft\": false,
            \"prerelease\": false
          }" \
          "https://api.github.com/repos/${{ github.repository }}/releases")
        
        # Check if latest release creation was successful
        if echo "$LATEST_CREATE_RESPONSE" | jq -e '.upload_url' > /dev/null 2>&1; then
          LATEST_UPLOAD_URL=$(echo "$LATEST_CREATE_RESPONSE" | jq -r '.upload_url' | sed 's/{?name,label}//')
          
          # Upload asset to latest release
          echo "üì§ Uploading asset to latest release..."
          UPLOAD_RESPONSE=$(curl -s \
            -X POST \
            -H "Authorization: token ${{ github.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @./builds/app-generator \
            "$LATEST_UPLOAD_URL?name=app-generator")
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Latest release created and asset uploaded successfully!"
          else
            echo "‚ö†Ô∏è  Warning: Latest release created but asset upload may have failed"
          fi
        else
          echo "‚ùå Failed to create latest release"
          echo "Response: $LATEST_CREATE_RESPONSE"
          exit 1
        fi

    - name: Show release info
      run: |
        echo "üéâ Release v${{ steps.version.outputs.version }} created successfully!"
        echo "üì• Versioned Download URL: https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/app-generator"
        echo "üîÑ Latest Download URL: https://github.com/${{ github.repository }}/releases/download/latest/app-generator"
        echo "üìã Latest version: https://raw.githubusercontent.com/${{ github.repository }}/main/latest-version.txt" 